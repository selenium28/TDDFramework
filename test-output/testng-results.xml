<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="1" ignored="0" total="3" passed="2">
  <reporter-output>
  </reporter-output>
  <suite name="RRP-Proxy Regression Test Suite" duration-ms="87705" started-at="2020-01-29T06:18:25Z" finished-at="2020-01-29T06:19:53Z">
    <groups>
    </groups>
    <test name="RRP-Proxy Regression Test Cases" duration-ms="87705" started-at="2020-01-29T06:18:25Z" finished-at="2020-01-29T06:19:53Z">
      <class name="com.rrpproxyregression.testcases.ResellerPortal_CheckDomainAvailability_SingleDomain">
        <test-method status="PASS" signature="suiteSetup()[pri:0, instance:com.rrpproxyregression.testcases.ResellerPortal_CheckDomainAvailability_SingleDomain@3f49dace]" name="suiteSetup" is-config="true" duration-ms="121" started-at="2020-01-29T06:18:25Z" finished-at="2020-01-29T06:18:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- suiteSetup -->
        <test-method status="PASS" signature="registerMethod(java.lang.reflect.Method)[pri:0, instance:com.rrpproxyregression.testcases.ResellerPortal_CheckDomainAvailability_SingleDomain@3f49dace]" name="registerMethod" is-config="true" duration-ms="3" started-at="2020-01-29T06:18:25Z" finished-at="2020-01-29T06:18:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.rrpproxyregression.testcases.ResellerPortal_CheckDomainAvailability_SingleDomain.verifyDomainNameAvailableForRegistrationNotPremium(java.lang.String,java.lang.String,java.lang.String) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- registerMethod -->
        <test-method status="PASS" signature="verifyDomainNameAvailableForRegistrationNotPremium(java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.rrpproxyregression.testcases.ResellerPortal_CheckDomainAvailability_SingleDomain@3f49dace]" name="verifyDomainNameAvailableForRegistrationNotPremium" duration-ms="17335" started-at="2020-01-29T06:18:25Z" finished-at="2020-01-29T06:18:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[dev8]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[com]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[TPP-60053]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyDomainNameAvailableForRegistrationNotPremium -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.rrpproxyregression.testcases.ResellerPortal_CheckDomainAvailability_SingleDomain@3f49dace]" name="afterMethod" is-config="true" duration-ms="6" started-at="2020-01-29T06:18:43Z" finished-at="2020-01-29T06:18:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyDomainNameAvailableForRegistrationNotPremium status=SUCCESS method=ResellerPortal_CheckDomainAvailability_SingleDomain.verifyDomainNameAvailableForRegistrationNotPremium(java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.rrpproxyregression.testcases.ResellerPortal_CheckDomainAvailability_SingleDomain@3f49dace] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="registerMethod(java.lang.reflect.Method)[pri:0, instance:com.rrpproxyregression.testcases.ResellerPortal_CheckDomainAvailability_SingleDomain@3f49dace]" name="registerMethod" is-config="true" duration-ms="1" started-at="2020-01-29T06:18:43Z" finished-at="2020-01-29T06:18:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.rrpproxyregression.testcases.ResellerPortal_CheckDomainAvailability_SingleDomain.verifyDomainNameNotAvailableForRegistration(java.lang.String,java.lang.String,java.lang.String) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- registerMethod -->
        <test-method status="PASS" signature="verifyDomainNameNotAvailableForRegistration(java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.rrpproxyregression.testcases.ResellerPortal_CheckDomainAvailability_SingleDomain@3f49dace]" name="verifyDomainNameNotAvailableForRegistration" duration-ms="25385" started-at="2020-01-29T06:18:43Z" finished-at="2020-01-29T06:19:08Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[dev8]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[com]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[TPP-60053]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyDomainNameNotAvailableForRegistration -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.rrpproxyregression.testcases.ResellerPortal_CheckDomainAvailability_SingleDomain@3f49dace]" name="afterMethod" is-config="true" duration-ms="1" started-at="2020-01-29T06:19:08Z" finished-at="2020-01-29T06:19:08Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyDomainNameNotAvailableForRegistration status=SUCCESS method=ResellerPortal_CheckDomainAvailability_SingleDomain.verifyDomainNameNotAvailableForRegistration(java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.rrpproxyregression.testcases.ResellerPortal_CheckDomainAvailability_SingleDomain@3f49dace] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="FAIL" signature="verifyDomainNameAvailableForRegistrationAndPremiumn(java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.rrpproxyregression.testcases.ResellerPortal_CheckDomainAvailability_SingleDomain@3f49dace]" name="verifyDomainNameAvailableForRegistrationAndPremiumn" duration-ms="44939" started-at="2020-01-29T06:19:08Z" finished-at="2020-01-29T06:19:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[dev8]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[com]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[TPP-60053]]>
              </value>
            </param>
          </params>
          <exception class="org.openqa.selenium.TimeoutException">
            <message>
              <![CDATA[Expected condition failed: waiting for visibility of Proxy element for: DefaultElementLocator 'By.xpath: //*[@id="availability"]/div/span' (tried for 10 second(s) with 500 milliseconds interval)]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.TimeoutException: Expected condition failed: waiting for visibility of Proxy element for: DefaultElementLocator 'By.xpath: //*[@id="availability"]/div/span' (tried for 10 second(s) with 500 milliseconds interval)
at org.openqa.selenium.support.ui.WebDriverWait.timeoutException(WebDriverWait.java:82)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:272)
at com.tppresellerportal.pages.TPPRegisterADomainPage.getSearchResultsMessage(TPPRegisterADomainPage.java:59)
at com.rrpproxyregression.testcases.ResellerPortal_CheckDomainAvailability_SingleDomain.verifyDomainNameAvailableForRegistrationAndPremiumn(ResellerPortal_CheckDomainAvailability_SingleDomain.java:131)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:583)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.access$000(SuiteRunner.java:40)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:489)
at org.testng.internal.thread.ThreadUtil$1.call(ThreadUtil.java:52)
at java.util.concurrent.FutureTask.run(Unknown Source)
at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
at java.lang.Thread.run(Unknown Source)
Caused by: org.openqa.selenium.NoSuchElementException: no such element: Unable to locate element: {"method":"xpath","selector":"//*[@id="availability"]/div/span"}
  (Session info: chrome=79.0.3945.130)
For documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html
Build info: version: '3.10.0', revision: '176b4a9', time: '2018-03-02T19:03:16.397Z'
System info: host: 'WC063317', ip: '192.168.216.1', os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '1.8.0_221'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 79.0.3945.130, chrome: {chromedriverVersion: 78.0.3904.70 (edb9c9f3de024..., userDataDir: C:\Users\ROY~1.ALC\AppData\...}, goog:chromeOptions: {debuggerAddress: localhost:64490}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: XP, platformName: XP, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify}
Session ID: b215575992fcd2e9dca0e41f48d13cfa
*** Element info: {Using=xpath, value=//*[@id="availability"]/div/span}
at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)
at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)
at java.lang.reflect.Constructor.newInstance(Unknown Source)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:160)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:83)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:601)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:371)
at org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:473)
at org.openqa.selenium.By$ByXPath.findElement(By.java:361)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:363)
at sun.reflect.GeneratedMethodAccessor3.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.openqa.selenium.support.events.EventFiringWebDriver.lambda$new$1(EventFiringWebDriver.java:103)
at com.sun.proxy.$Proxy14.findElement(Unknown Source)
at org.openqa.selenium.support.events.EventFiringWebDriver.findElement(EventFiringWebDriver.java:186)
at org.openqa.selenium.support.pagefactory.DefaultElementLocator.findElement(DefaultElementLocator.java:69)
at org.openqa.selenium.support.pagefactory.internal.LocatingElementHandler.invoke(LocatingElementHandler.java:38)
at com.sun.proxy.$Proxy18.isDisplayed(Unknown Source)
at org.openqa.selenium.support.ui.ExpectedConditions.elementIfVisible(ExpectedConditions.java:315)
at org.openqa.selenium.support.ui.ExpectedConditions.access$100(ExpectedConditions.java:44)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:301)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:298)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:249)
... 22 more
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.TimeoutException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyDomainNameAvailableForRegistrationAndPremiumn -->
        <test-method status="PASS" signature="registerMethod(java.lang.reflect.Method)[pri:0, instance:com.rrpproxyregression.testcases.ResellerPortal_CheckDomainAvailability_SingleDomain@3f49dace]" name="registerMethod" is-config="true" duration-ms="0" started-at="2020-01-29T06:19:08Z" finished-at="2020-01-29T06:19:08Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.rrpproxyregression.testcases.ResellerPortal_CheckDomainAvailability_SingleDomain.verifyDomainNameAvailableForRegistrationAndPremiumn(java.lang.String,java.lang.String,java.lang.String) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- registerMethod -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.rrpproxyregression.testcases.ResellerPortal_CheckDomainAvailability_SingleDomain@3f49dace]" name="afterMethod" is-config="true" duration-ms="2" started-at="2020-01-29T06:19:53Z" finished-at="2020-01-29T06:19:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyDomainNameAvailableForRegistrationAndPremiumn status=FAILURE method=ResellerPortal_CheckDomainAvailability_SingleDomain.verifyDomainNameAvailableForRegistrationAndPremiumn(java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.rrpproxyregression.testcases.ResellerPortal_CheckDomainAvailability_SingleDomain@3f49dace] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="tearDown()[pri:0, instance:com.rrpproxyregression.testcases.ResellerPortal_CheckDomainAvailability_SingleDomain@3f49dace]" name="tearDown" is-config="true" duration-ms="260" started-at="2020-01-29T06:19:53Z" finished-at="2020-01-29T06:19:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- com.rrpproxyregression.testcases.ResellerPortal_CheckDomainAvailability_SingleDomain -->
    </test> <!-- RRP-Proxy Regression Test Cases -->
  </suite> <!-- RRP-Proxy Regression Test Suite -->
</testng-results>
